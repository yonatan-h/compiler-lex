TKN_COMMENT:	{ sample program in MINI language – computes factorials }
TKN_READ:	read
TKN_IDENTIFIER:	x
TKN_SEMICOLON:	;
TKN_COMMENT:	{ input an integer }
TKN_IF:	if
TKN_IDENTIFIER:	x
TKN_GREATER_THAN:	>
TKN_INTEGER:	0
TKN_THEN:	then
TKN_COMMENT:	{ don’t compute if x<= 0}
TKN_IDENTIFIER:	fact
TKN_ASSIGN:	:=
TKN_INTEGER:	1
TKN_SEMICOLON:	;
TKN_REPEAT:	repeat
TKN_IDENTIFIER:	fact
TKN_ASSIGN:	:=
TKN_IDENTIFIER:	fact
TKN_MULTIPLY:	*
TKN_IDENTIFIER:	x
TKN_SEMICOLON:	;
TKN_IDENTIFIER:	x
TKN_ASSIGN:	:=
TKN_IDENTIFIER:	x
TKN_SUBTRACT:	-
TKN_INTEGER:	1
TKN_UNTIL:	until
TKN_IDENTIFIER:	x
TKN_EQUAL:	=
TKN_INTEGER:	0
TKN_SEMICOLON:	;
TKN_WRITE:	write
TKN_IDENTIFIER:	fact
TKN_SEMICOLON:	;
TKN_COMMENT:	{ output factorial of x}
TKN_ELSE:	else
TKN_IDENTIFIER:	fact
TKN_ASSIGN:	:=
TKN_SUBTRACT:	-
TKN_INTEGER:	1
TKN_SEMICOLON:	;
TKN_WRITE:	write
TKN_IDENTIFIER:	fact
TKN_SEMICOLON:	;
TKN_COMMENT:	{output -1 to show no solution}
TKN_END:	end
TKN_IF:	if
TKN_INTEGER:	5
TKN_GREATER_THAN:	>
TKN_INTEGER:	2
TKN_WRITE:	write
TKN_INTEGER:	1
TKN_MULTIPLY:	*
TKN_LEFT_BRACKET:	(
TKN_INTEGER:	1
TKN_ADD:	+
TKN_INTEGER:	1
TKN_RIGHT_BRACKET:	)
TKN_SEMICOLON:	;
TKN_END:	end
TKN_IF:	if
TKN_INTEGER:	5
TKN_EQUAL:	=
TKN_INTEGER:	5
TKN_WRITE:	write
TKN_INTEGER:	1
TKN_ADD:	+
TKN_INTEGER:	1
TKN_SEMICOLON:	;
TKN_END:	end
TKN_IF:	if
TKN_INTEGER:	2
TKN_LESS_THAN:	<
TKN_INTEGER:	5
TKN_WRITE:	write
TKN_INTEGER:	1
TKN_DIVIDE:	/
TKN_INTEGER:	1
TKN_SEMICOLON:	;
TKN_END:	end
